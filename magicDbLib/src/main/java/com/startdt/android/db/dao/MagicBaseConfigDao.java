package com.startdt.android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.startdt.android.db.table.MagicBaseConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAGIC_BASE_CONFIG".
*/
public class MagicBaseConfigDao extends AbstractDao<MagicBaseConfig, Long> {

    public static final String TABLENAME = "MAGIC_BASE_CONFIG";

    /**
     * Properties of entity MagicBaseConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActivityType = new Property(1, int.class, "activityType", false, "ACTIVITY_TYPE");
        public final static Property IsOpenFillLight = new Property(2, boolean.class, "isOpenFillLight", false, "IS_OPEN_FILL_LIGHT");
        public final static Property WarmValue = new Property(3, String.class, "warmValue", false, "WARM_VALUE");
        public final static Property CodeValue = new Property(4, String.class, "codeValue", false, "CODE_VALUE");
        public final static Property IsOPenCameraMirror = new Property(5, boolean.class, "isOPenCameraMirror", false, "IS_OPEN_CAMERA_MIRROR");
        public final static Property CameraRotateValue = new Property(6, int.class, "cameraRotateValue", false, "CAMERA_ROTATE_VALUE");
        public final static Property Exposure = new Property(7, int.class, "exposure", false, "EXPOSURE");
        public final static Property IsOPenVoice = new Property(8, boolean.class, "isOPenVoice", false, "IS_OPEN_VOICE");
        public final static Property VoiceValue = new Property(9, int.class, "voiceValue", false, "VOICE_VALUE");
        public final static Property IsOPenSoundType = new Property(10, boolean.class, "isOPenSoundType", false, "IS_OPEN_SOUND_TYPE");
        public final static Property SoundTypeValue = new Property(11, int.class, "soundTypeValue", false, "SOUND_TYPE_VALUE");
        public final static Property MinFaceHeight = new Property(12, int.class, "minFaceHeight", false, "MIN_FACE_HEIGHT");
        public final static Property MinFace = new Property(13, int.class, "minFace", false, "MIN_FACE");
        public final static Property MaxFace = new Property(14, int.class, "maxFace", false, "MAX_FACE");
        public final static Property FaceLeftMargin = new Property(15, int.class, "faceLeftMargin", false, "FACE_LEFT_MARGIN");
        public final static Property FaceRightMargin = new Property(16, int.class, "faceRightMargin", false, "FACE_RIGHT_MARGIN");
    }


    public MagicBaseConfigDao(DaoConfig config) {
        super(config);
    }
    
    public MagicBaseConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAGIC_BASE_CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ACTIVITY_TYPE\" INTEGER NOT NULL ," + // 1: activityType
                "\"IS_OPEN_FILL_LIGHT\" INTEGER NOT NULL ," + // 2: isOpenFillLight
                "\"WARM_VALUE\" TEXT," + // 3: warmValue
                "\"CODE_VALUE\" TEXT," + // 4: codeValue
                "\"IS_OPEN_CAMERA_MIRROR\" INTEGER NOT NULL ," + // 5: isOPenCameraMirror
                "\"CAMERA_ROTATE_VALUE\" INTEGER NOT NULL ," + // 6: cameraRotateValue
                "\"EXPOSURE\" INTEGER NOT NULL ," + // 7: exposure
                "\"IS_OPEN_VOICE\" INTEGER NOT NULL ," + // 8: isOPenVoice
                "\"VOICE_VALUE\" INTEGER NOT NULL ," + // 9: voiceValue
                "\"IS_OPEN_SOUND_TYPE\" INTEGER NOT NULL ," + // 10: isOPenSoundType
                "\"SOUND_TYPE_VALUE\" INTEGER NOT NULL ," + // 11: soundTypeValue
                "\"MIN_FACE_HEIGHT\" INTEGER NOT NULL ," + // 12: minFaceHeight
                "\"MIN_FACE\" INTEGER NOT NULL ," + // 13: minFace
                "\"MAX_FACE\" INTEGER NOT NULL ," + // 14: maxFace
                "\"FACE_LEFT_MARGIN\" INTEGER NOT NULL ," + // 15: faceLeftMargin
                "\"FACE_RIGHT_MARGIN\" INTEGER NOT NULL );"); // 16: faceRightMargin
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAGIC_BASE_CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MagicBaseConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getActivityType());
        stmt.bindLong(3, entity.getIsOpenFillLight() ? 1L: 0L);
 
        String warmValue = entity.getWarmValue();
        if (warmValue != null) {
            stmt.bindString(4, warmValue);
        }
 
        String codeValue = entity.getCodeValue();
        if (codeValue != null) {
            stmt.bindString(5, codeValue);
        }
        stmt.bindLong(6, entity.getIsOPenCameraMirror() ? 1L: 0L);
        stmt.bindLong(7, entity.getCameraRotateValue());
        stmt.bindLong(8, entity.getExposure());
        stmt.bindLong(9, entity.getIsOPenVoice() ? 1L: 0L);
        stmt.bindLong(10, entity.getVoiceValue());
        stmt.bindLong(11, entity.getIsOPenSoundType() ? 1L: 0L);
        stmt.bindLong(12, entity.getSoundTypeValue());
        stmt.bindLong(13, entity.getMinFaceHeight());
        stmt.bindLong(14, entity.getMinFace());
        stmt.bindLong(15, entity.getMaxFace());
        stmt.bindLong(16, entity.getFaceLeftMargin());
        stmt.bindLong(17, entity.getFaceRightMargin());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MagicBaseConfig entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getActivityType());
        stmt.bindLong(3, entity.getIsOpenFillLight() ? 1L: 0L);
 
        String warmValue = entity.getWarmValue();
        if (warmValue != null) {
            stmt.bindString(4, warmValue);
        }
 
        String codeValue = entity.getCodeValue();
        if (codeValue != null) {
            stmt.bindString(5, codeValue);
        }
        stmt.bindLong(6, entity.getIsOPenCameraMirror() ? 1L: 0L);
        stmt.bindLong(7, entity.getCameraRotateValue());
        stmt.bindLong(8, entity.getExposure());
        stmt.bindLong(9, entity.getIsOPenVoice() ? 1L: 0L);
        stmt.bindLong(10, entity.getVoiceValue());
        stmt.bindLong(11, entity.getIsOPenSoundType() ? 1L: 0L);
        stmt.bindLong(12, entity.getSoundTypeValue());
        stmt.bindLong(13, entity.getMinFaceHeight());
        stmt.bindLong(14, entity.getMinFace());
        stmt.bindLong(15, entity.getMaxFace());
        stmt.bindLong(16, entity.getFaceLeftMargin());
        stmt.bindLong(17, entity.getFaceRightMargin());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MagicBaseConfig readEntity(Cursor cursor, int offset) {
        MagicBaseConfig entity = new MagicBaseConfig( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // activityType
            cursor.getShort(offset + 2) != 0, // isOpenFillLight
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // warmValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // codeValue
            cursor.getShort(offset + 5) != 0, // isOPenCameraMirror
            cursor.getInt(offset + 6), // cameraRotateValue
            cursor.getInt(offset + 7), // exposure
            cursor.getShort(offset + 8) != 0, // isOPenVoice
            cursor.getInt(offset + 9), // voiceValue
            cursor.getShort(offset + 10) != 0, // isOPenSoundType
            cursor.getInt(offset + 11), // soundTypeValue
            cursor.getInt(offset + 12), // minFaceHeight
            cursor.getInt(offset + 13), // minFace
            cursor.getInt(offset + 14), // maxFace
            cursor.getInt(offset + 15), // faceLeftMargin
            cursor.getInt(offset + 16) // faceRightMargin
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MagicBaseConfig entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActivityType(cursor.getInt(offset + 1));
        entity.setIsOpenFillLight(cursor.getShort(offset + 2) != 0);
        entity.setWarmValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCodeValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsOPenCameraMirror(cursor.getShort(offset + 5) != 0);
        entity.setCameraRotateValue(cursor.getInt(offset + 6));
        entity.setExposure(cursor.getInt(offset + 7));
        entity.setIsOPenVoice(cursor.getShort(offset + 8) != 0);
        entity.setVoiceValue(cursor.getInt(offset + 9));
        entity.setIsOPenSoundType(cursor.getShort(offset + 10) != 0);
        entity.setSoundTypeValue(cursor.getInt(offset + 11));
        entity.setMinFaceHeight(cursor.getInt(offset + 12));
        entity.setMinFace(cursor.getInt(offset + 13));
        entity.setMaxFace(cursor.getInt(offset + 14));
        entity.setFaceLeftMargin(cursor.getInt(offset + 15));
        entity.setFaceRightMargin(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MagicBaseConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MagicBaseConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MagicBaseConfig entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
